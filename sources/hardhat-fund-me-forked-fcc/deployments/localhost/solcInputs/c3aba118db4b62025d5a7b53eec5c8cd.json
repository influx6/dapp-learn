{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  mapping(address => uint256) public s_addressToAmountFunded;\n  address[] public s_funders;\n  address public s_owner;\n  AggregatorV3Interface public s_priceFeed;\n\n  constructor(address priceFeed) {\n    s_priceFeed = AggregatorV3Interface(priceFeed);\n    s_owner = msg.sender;\n  }\n\n  function fund() public payable {\n    uint256 minimumUSD = 50 * 10**18;\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= minimumUSD,\n      \"You need to spend more ETH!\"\n    );\n    // require(PriceConverter.getConversionRate(msg.value) >= minimumUSD, \"You need to spend more ETH!\");\n    s_addressToAmountFunded[msg.sender] += msg.value;\n    s_funders.push(msg.sender);\n  }\n\n  function getVersion() public view returns (uint256) {\n    return s_priceFeed.version();\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == s_owner);\n    _;\n  }\n\n  function withdraw() public payable onlyOwner {\n    payable(msg.sender).transfer(address(this).balance);\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < s_funders.length;\n      funderIndex++\n    ) {\n      address funder = s_funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n  }\n\n  function cheaperWithdraw() public payable onlyOwner {\n    payable(msg.sender).transfer(address(this).balance);\n    address[] memory funders = s_funders;\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    // ETH/USD rate in 18 digit\n    return uint256(answer * 10000000000);\n  }\n\n  // 1000000000\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}